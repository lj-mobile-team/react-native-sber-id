// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SberbankSDK
import CommonCrypto
import Foundation
import MPAnalytics
import SafariServices
import Swift
import UIKit
@_inheritsConvenienceInitializers @objc final public class SBKAuthManager : ObjectiveC.NSObject {
  public static var navigationController: UIKit.UINavigationController?
  @objc public static func auth(withSberId request: SberbankSDK.SBKAuthRequest)
  @objc public static func soleLoginWebPageAuth(sberIdRequest request: SberbankSDK.SBKAuthRequest, svcRedirectUrlString: Swift.String) -> Swift.Bool
  @objc public static func getResponseFrom(_ url: Foundation.URL, completion: (SberbankSDK.SBKAuthResponse) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
public var SBKUtilsCodeChallengeMethod: Swift.String
@_inheritsConvenienceInitializers @objc final public class SBKUtils : ObjectiveC.NSObject {
  @objc public static func createVerifier() -> Swift.String
  @objc public static func createChallenge(_ verifier: Swift.String) -> Swift.String
  @objc public static func getSSOUrlStringFrom(_ url: Foundation.URL?) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class SBKLoginButton : UIKit.UIButton {
  @objc public convenience init(type: SberbankSDK.LoginButtonStyle, textType: SberbankSDK.LoginButtonTextType, desiredHeight: CoreGraphics.CGFloat, desiredWidth: CoreGraphics.CGFloat)
  @objc final public func setBorderColor(_ color: UIKit.UIColor)
  @objc public convenience init(type: SberbankSDK.LoginButtonStyle)
  @objc final public func setCornerRadius(_ radiusStyle: SberbankSDK.CornerRadiusStyle)
  @objc override final public func sendAction(_ action: ObjectiveC.Selector, to target: Any?, for event: UIKit.UIEvent?)
  final public func attemptToPersonalize() -> Swift.Bool
  @objc deinit
}
public enum SberbankSDKError : Swift.Error {
  case unknownError
  public static func == (a: SberbankSDK.SberbankSDKError, b: SberbankSDK.SberbankSDKError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension SberbankSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum LoginButtonStyle : Swift.Int {
  case green = 0
  case white
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LoginButtonTextType : Swift.Int {
  case short = 0
  case general
  case filling
  case pursue
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CornerRadiusStyle : Swift.Int {
  case no = 0
  case normal
  case max
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SBKAuthRequest : ObjectiveC.NSObject {
  @objc public static var challengeMethod: Swift.String
  @objc final public var clientId: Swift.String
  @objc final public var scope: Swift.String
  @objc final public var state: Swift.String
  @objc final public var nonce: Swift.String
  @objc final public var redirectUri: Swift.String
  @objc final public var ssoBaseUrl: Swift.String?
  @objc final public var codeChallenge: Swift.String?
  @objc final public var codeChallengeMethod: Swift.String?
  @objc public init(clientId: Swift.String, scope: Swift.String, state: Swift.String, nonce: Swift.String, ssoBaseUrl: Swift.String?, redirectUri: Swift.String, codeChallenge: Swift.String?, codeChallengeMethod: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SBKAuthResponse : ObjectiveC.NSObject {
  @objc final public var nonce: Swift.String {
    get
  }
  @objc final public var state: Swift.String? {
    get
  }
  @objc final public var authCode: Swift.String? {
    get
  }
  @objc final public var error: Swift.String? {
    get
  }
  @objc final public var isSuccess: Swift.Bool {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
